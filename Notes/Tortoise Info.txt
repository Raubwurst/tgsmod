I'll link you to a tutorial, but first I'll just give you a fast way to get into it: download TortoiseSVN - it's probably the best way to get this stuff done in a GUI on Windows. Once it's installed, it'll ask you to restart - I didn't, and it worked just fine, but you might want to, to be safe. Now go to a folder in Windows Explorer - any folder will do, just choose one that you're happy making your 'working area'. I made a new folder called 'TGS' under 'Documents'. 

Now right click anywhere in the empty area of the folder and choose SVN checkout. The URL of the repository is 
Code: [Select]
http://mountblade.mcr00t.eu/svn

, the checkout directory should be the folder that you chose and the rest you will want to leave as default (Fully recursive, not omitting externals, HEAD revision), so click OK! 

You'll be asked for your username and password - it's the same as the website. A box will pop-up and you'll see the list of files being downloaded, after it's done click OK. Now you have the latest version! TortoiseSVN keeps track of everything, so you don't need to go through that procedure again - from now on, whenever you want to grab any changes that anyone makes you just need to right-click in the empty space and choose SVN Update. Make sure to do this before you make a commit! 

As for updating the server, go and change something now - maybe just add a comment or something to test it. Make sure to start using the version you've just checked out - the other directory you were using is now obsolete (though you might want to save it for archive purposes). So, after you've made a little change to one or multiple files (I just added a comment on module_scenes.py) right click any empty area within the folder again (there's a pattern, here ) and click SVN Commit. 

The first big white box is the 'Message' area - this will appear in the logs and on the website. Just give a little metainfo about what you did - for me, I added a comment, so I start my message with

'Added a comment'

This isn't very descriptive though, I've got to expand it a bit, otherwise we won't know what I mean when we look back into the logs. 

'Added a comment - reminder TODO new scenes'

This is much better, it describes what I added. We still need something, though! How do we know who did this commit? We don't, we need a name, and preferably a contact email. So it becomes:

'Added a comment - reminder TODO new scenes

Vaerraent <vaerraent@gmail.com>'

This is the general standard syntax for identifying yourself in version control systems. Now, you might have noticed I capitalized TODO - there are a number of abbreviations that developers add to their comments to make things easier for themselves. TODO in a comment identifies a feature to be added, in that area. Preferably with an example commented beneath it. FIXME identifies a bug or sub-par code that needs to be polished and refined, and HACK identifies a temporary implementation that will definitely need to be changed or fixed later. It's best to avoid HACKs, but be sure to add a HACK 'tag' if you need to do a little hack somewhere - that way, when something has been fixed somewhere else, the hack can be fixed. It's best to use all these tags wherever possible - this way, when you only have an hour or so to get a quick bit of coding done you can just open a code file and search for any of these terms.

Another thing that's often added to messages is ticket numbers - when a feature or bug request is made, it'll appear under 'New tickets'. Tickets are referred to by their ticket number - have a look at the first ticket, I made that one before the first commit. In some cases, commits will change the status of a ticket, or attempt to implement or rectify something mentioned in a ticket. In these cases, you'll address the ticket in the message - adding 'fixes #1' means it fixes ticket #1. Other resolutions you can do with tickets on the website include wontfix, invalid (user error), duplicate (already exists in another ticket) or worksforme. Tickets can be assigned to different developers, so everybody knows which problems they should personally be addressing.

Anyway, in the 'changes made' box you should see a list of files that have been changed. Make sure all the ones you changed are ticked. 'Show unversioned files' should always be ticked (to show all files in the folder, if you add new ones) and you can select all files in a quick click with the 'Select all' checkbox. Before you make the commit, double-click on the file you changed - this is a diff, a differential view of the two files. On the left is the old version, on the right is the new version. You can even edit files in here, if you made any mistakes. Close it when you're finished and click OK to commit!

The content should be sent, and you should get the 'Completed     At revision: X' message. This means the server's now updated, you should be able to refresh the source view on the website and see your changes there.

If you want more about the features of SVN and TortoiseSVN specifically, check out this tutorial. It goes into more advanced stuff such as branching, we don't really need to do that yet but it might be useful later on.